#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç AI-–ø–∞—Ä—Å–µ—Ä–∞"""

import asyncio
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
import sys
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from deepscraper.planner.deepseek_client import DeepSeekClient
from deepscraper.runner.browser import BrowserRunner
from deepscraper.config import get_settings

async def test_plan_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞"""
    print("üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é AI-–ø–ª–∞–Ω–∞...")
    
    client = DeepSeekClient()
    try:
        plan = await client.generate_plan(
            url="https://books.toscrape.com",
            goal="–°–æ–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥ –∏ —Ü–µ–Ω—ã"
        )
        
        print("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìÑ URL: {plan.url}")
        print(f"üéØ –¶–µ–ª—å: {plan.goal}")
        print(f"üìã –®–∞–≥–∏: {len(plan.steps)}")
        print(f"üìä –ü–æ–ª—è: {[f.name for f in plan.fields]}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        with open("simple_plan.json", "w", encoding="utf-8") as f:
            f.write(plan.model_dump_json(indent=2))
        print("üíæ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ simple_plan.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
    finally:
        await client.aclose()

async def test_browser():
    """–¢–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä...")
    
    runner = BrowserRunner()
    try:
        async with runner.context() as page:
            await runner.navigate(page, "https://books.toscrape.com")
            title = await page.title()
            print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            content = await page.content()
            if "books" in content.lower():
                print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç AI-–ø–∞—Ä—Å–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_settings()
    print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: POSTGRES_DSN={settings.postgres_dsn}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞
    await test_plan_generation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    await test_browser()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
