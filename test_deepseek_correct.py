import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
def load_env():
    env_path = Path('.env')
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_env()

from deepscraper.planner.deepseek_client import DeepSeekClient

async def main():
    api_key = os.getenv("DEEPSEEK_API_KEY")
    print(f"üîë API –∫–ª—é—á –∏–∑ .env: {api_key}")
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    if api_key == "your_actual_api_key_here":
        print("‚ùå API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞!")
        return
    
    print(f"‚úÖ API –∫–ª—é—á: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({api_key[:10]}...)")
    
    client = DeepSeekClient()
    
    print("\\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º DeepSeek AI...")
    print("üìç URL: https://httpbin.org/html")
    print("üéØ –¶–µ–ª—å: –ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç")
    
    try:
        plan = await client.generate_plan(
            url="https://httpbin.org/html",
            goal="–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 –∏ –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Ç–µ–∫—Å—Ç–∞"
        )
        
        print("\\n‚úÖ –£–°–ü–ï–•! DeepSeek AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –ø–ª–∞–Ω!")
        print(f"üìã –®–∞–≥–æ–≤: {len(plan.steps)}")
        print(f"üìä –ü–æ–ª–µ–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {[f.name for f in plan.fields]}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
        import json
        with open("deepseek_real_plan.json", "w") as f:
            f.write(plan.model_dump_json(indent=2))
        print("üíæ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: deepseek_real_plan.json")
        
        # –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞
        print("\\nüìù –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞:")
        for i, step in enumerate(plan.steps):
            wait_info = f" (wait: {step.wait.type})" if step.wait else ""
            print(f"  {i+1}. {step.action}: {step.target or ''}{wait_info}")
            
    except Exception as e:
        print(f"\\n‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}")
        import traceback
        traceback.print_exc()
    
    await client.aclose()

asyncio.run(main())
