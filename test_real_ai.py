import asyncio
import os
import sys
from pathlib import Path

sys.path.insert(0, 'src')

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
env_path = Path('.env')
if env_path.exists():
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

from deepscraper.planner.deepseek_client import DeepSeekClient

async def main():
    api_key = os.getenv("DEEPSEEK_API_KEY")
    print(f"üîë –ù–æ–≤—ã–π API –∫–ª—é—á: {api_key[:10]}...")
    
    client = DeepSeekClient()
    
    print("\\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–´–ô DeepSeek AI —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
    
    try:
        plan = await client.generate_plan(
            url="https://httpbin.org/html",
            goal="–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        )
        
        print("\\n‚úÖ –†–ï–ê–õ–¨–ù–´–ô AI –°–ì–ï–ù–ï–†–ò–†–û–í–ê–õ –ü–õ–ê–ù!")
        print(f"üìã –®–∞–≥–æ–≤: {len(plan.steps)}")
        print(f"üìä –ü–æ–ª–µ–π: {[f.name for f in plan.fields]}")
        print(f"üéØ –°–µ–ª–µ–∫—Ç–æ—Ä—ã: {[f.selector for f in plan.fields]}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI
        with open("real_ai_plan.json", "w") as f:
            f.write(plan.model_dump_json(indent=2))
        print("üíæ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: real_ai_plan.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    await client.aclose()

asyncio.run(main())
