#!/usr/bin/env python3
"""–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""

import asyncio
import json
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent / 'src'))

from deepscraper.planner.deepseek_client import DeepSeekClient
from deepscraper.runner.browser import BrowserRunner
from deepscraper.config import get_settings

async def test_full_parsing():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
    client = DeepSeekClient()
    plan = await client.generate_plan(
        url="https://books.toscrape.com",
        goal="–°–æ–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥ –∏ —Ü–µ–Ω—ã"
    )
    await client.aclose()
    
    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω —Å {len(plan.steps)} —à–∞–≥–∞–º–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    runner = BrowserRunner()
    extracted_data = []
    
    try:
        async with runner.context() as page:
            for step in plan.steps:
                if step.action == "navigate" and step.target:
                    print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {step.target}")
                    await runner.navigate(page, step.target)
                    
                elif step.action == "wait" and step.wait:
                    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
                    await runner.wait(page, step.wait.model_dump())
                    
                elif step.action == "extract":
                    print("üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—è–º –∏–∑ –ø–ª–∞–Ω–∞
                    for field in plan.fields:
                        selector = field.selector
                        try:
                            elements = await page.query_selector_all(selector)
                            values = []
                            for element in elements[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 5 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                                text = await element.text_content()
                                if text:
                                    values.append(text.strip())
                            
                            print(f"  üìù {field.name}: {len(values)} –∑–Ω–∞—á–µ–Ω–∏–π")
                            for i, value in enumerate(values[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                print(f"    {i+1}. {value}")
                                
                        except Exception as e:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {field.name}: {e}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await page.screenshot(path="test_screenshot.png")
            print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_screenshot.png")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    
    print("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_full_parsing())
