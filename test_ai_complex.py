import asyncio
import os
import sys
from pathlib import Path

sys.path.insert(0, 'src')

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
env_path = Path('.env')
if env_path.exists():
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

from deepscraper.planner.deepseek_client import DeepSeekClient

async def test_complex_scenarios():
    client = DeepSeekClient()
    
    scenarios = [
        {
            "url": "https://example.com/products", 
            "goal": "–°–æ–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, —Ü–µ–Ω—ã, –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"
        },
        {
            "url": "https://news-site.com/articles",
            "goal": "–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–µ–π, –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∞–≤—Ç–æ—Ä–æ–≤ –∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        },
        {
            "url": "https://company.com/about", 
            "goal": "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email, —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\\nüß™ –°—Ü–µ–Ω–∞—Ä–∏–π {i}: {scenario['goal']}")
        print(f"üìç URL: {scenario['url']}")
        
        try:
            plan = await client.generate_plan(scenario['url'], scenario['goal'])
            print(f"‚úÖ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –ø–ª–∞–Ω: {len(plan.fields)} –ø–æ–ª–µ–π")
            print(f"üìä –ü–æ–ª—è: {[f.name for f in plan.fields]}")
            print(f"üîÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {plan.pagination.type}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã
            with open(f"ai_plan_scenario_{i}.json", "w") as f:
                f.write(plan.model_dump_json(indent=2))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await client.aclose()
    print("\\nüéâ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!")

asyncio.run(test_complex_scenarios())
