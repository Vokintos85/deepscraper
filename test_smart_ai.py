import asyncio
import sys
import os
from pathlib import Path

sys.path.insert(0, 'src')

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
env_path = Path('.env')
if env_path.exists():
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

from deepscraper.planner.deepseek_client import DeepSeekClient

async def test_scenario(url, goal):
    print(f"\\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
    print(f"üìã –¶–µ–ª—å: {goal}")
    
    client = DeepSeekClient()
    plan = await client.generate_plan(url, goal)
    
    print(f"ü§ñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: {len(plan.fields)} –ø–æ–ª–µ–π")
    print(f"üìä –ü–æ–ª—è: {[f.name for f in plan.fields]}")
    print(f"üîÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {plan.pagination.type}")
    
    await client.aclose()
    return plan

async def main():
    # –†–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = [
        ("https://example-shop.com/products", "–°–æ–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤"),
        ("https://news-site.com/article", "–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏"),
        ("https://company.com/contacts", "–ù–∞–π—Ç–∏ email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"),
        ("https://httpbin.org/json", "–ü–æ–ª—É—á–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ"),
        ("https://httpbin.org/html", "–ò–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    ]
    
    for url, goal in scenarios:
        await test_scenario(url, goal)

asyncio.run(main())
